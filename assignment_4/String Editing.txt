5.6 STRING EDITING

We are given two strings \( X=x_{1}, x_{2}, \ldots, x_{n} \) and \( Y=y_{1}, y_{2}, \ldots, y_{m} \), where \( x_{i}, 1 \leq i \leq n \), and \( y_{j}, 1 \leq j \leq m \), are members of a finite set of symbols known as the alphabet. We want to transform \( X \) into \( Y \) using a sequence of edit operations on \( X \). The permissible edit operations are insert, delete, and change (a symbol of \( X \) into another), and there is a cost associated with performing each. The cost of a sequence of operations is the sum of the costs of the individual operations in the sequence. The problem of string editing is to identify a minimum-cost sequence of edit operations that will transform \( X \) into \( Y \).

Let \( D\left(x_{i}\right) \) be the cost of deleting the symbol \( x_{i} \) from \( X, I\left(y_{j}\right) \) be the cost of inserting the symbol \( y_{j} \) into \( X \), and \( C\left(x_{i}, y_{j}\right) \) be the cost of changing the symbol \( x_{i} \) of \( X \) into \( y_{j} \).

Example 5.19 Consider the sequences \( X=x_{1}, x_{2}, x_{3}, x_{4}, x_{5}=a, a, b, a, b \) and \( Y=y_{1}, y_{2}, y_{3}, y_{4}=b, a, b, b \). Let the cost associated with each insertion and deletion be 1 (for any symbol). Also let the cost of changing any symbol to any other symbol be 2 . One possible way of transforming \( X \) into \( Y \) is delete each \( x_{i}, 1 \leq i \leq 5 \), and insert each \( y_{j}, 1 \leq j \leq 4 \). The total cost of this edit sequence is 9 . Another possible edit sequence is delete \( x_{1} \) and \( x_{2} \) and insert \( y_{4} \) at the end of string \( X \). The total cost is only 3 .

A solution to the string editing problem consists of a sequence of decisions, one for each edit operation. Let \( \mathcal{E} \) be a minimum-cost edit sequence for transforming \( X \) into \( Y \). The first operation, \( O \), in \( \mathcal{E} \) is delete, insert, or change. If \( \mathcal{E}^{\prime}=\mathcal{E}-\{O\} \) and \( X^{\prime} \) is the result of applying \( O \) on \( X \), then \( \mathcal{E}^{\prime} \) should be a minimum-cost edit sequence that transforms \( X^{\prime} \) into \( Y \). Thus the principle of optimality holds for this problem. A dynamic programming solution for this problem can be obtained as follows. Define \( \operatorname{cost}(i, j) \) to be the minimum cost of any edit sequence for transforming \( x_{1}, x_{2}, \ldots, x_{i} \) into \( y_{1}, y_{2}, \ldots, y_{j} \) (for \( 0 \leq i \leq n \) and \( 0 \leq j \leq m \) ). Compute \( \operatorname{cost}(i, j) \) for each \( i \) and \( j \). Then \( \operatorname{cost}(n, m) \) is the cost of an optimal edit sequence.

For \( i=j=0, \operatorname{cost}(i, j)=0 \), since the two sequences are identical (and empty). Also, if \( j=0 \) and \( i > 0 \), we can transform \( X \) into \( Y \) by a sequence of deletes. Thus, \( \operatorname{cost}(i, 0)=\operatorname{cost}(i-1,0)+D\left(x_{i}\right) \). Similarly, if \( i=0 \) and \( j > 0 \), we get \( \operatorname{cost}(0, j)=\operatorname{cost}(0, j-1)+I\left(y_{j}\right) \). If \( i \neq 0 \) and \( j \neq 0, x_{1}, x_{2}, \ldots, x_{i} \) can be transformed into \( y_{1}, y_{2}, \ldots, y_{j} \) in one of three ways:
1. Transform \( x_{1}, x_{2}, \ldots, x_{i-1} \) into \( y_{1}, y_{2}, \ldots, y_{j} \) using a minimum-cost edit sequence and then delete \( x_{i} \). The corresponding cost is cost \( (i-1, j)+ \) \( D\left(x_{i}\right) \).
2. Transform \( x_{1}, x_{2}, \ldots, x_{i-1} \) into \( y_{1}, y_{2}, \ldots, y_{j-1} \) using a minimum-cost edit sequence and then change the symbol \( x_{i} \) to \( y_{j} \). The associated cost is \( \operatorname{cost}(i-1, j-1)+C\left(x_{i}, y_{j}\right) \).
3. Transform \( x_{1}, x_{2}, \ldots, x_{i} \) into \( y_{1}, y_{2}, \ldots, y_{j-1} \) using a minimum-cost edit sequence and then insert \( y_{j} \). This corresponds to a cost of \( \operatorname{cost}(i, j- \) 1) \( +I\left(y_{j}\right) \).

The minimum cost of any edit sequence that transforms \( x_{1}, x_{2}, \ldots, x_{i} \) into \( y_{1}, y_{2}, \ldots, y_{j} \) (for \( i > 0 \) and \( j > 0 \) ) is the minimum of the above three costs, according to the principle of optimality. Therefore, we arrive at the following recurrence equation for \( \operatorname{cost}(i, j) \) :
\[
\begin{array}{l}
\operatorname{cost}(i, j)=\left\{\begin{array}{ll}
0 & i=j=0 \\
\operatorname{cost}(i-1,0)+D\left(x_{i}\right) & j=0, i > 0 \\
\operatorname{cost}(0, j-1)+I\left(y_{j}\right) & i=0, j > 0 \\
\operatorname{cost} t^{\prime}(i, j) & i > 0, j > 0
\end{array}\right. \\
\text { where } \operatorname{cost}^{\prime}(i, j)=\min \left\{\begin{array}{l}
\operatorname{cost}(i-1, j)+D\left(x_{i}\right), \\
\operatorname{cost}(i-1, j-1)+C\left(x_{i}, y_{j}\right), \\
\left.\operatorname{cost}(i, j-1)+I\left(y_{j}\right)\right\}
\end{array}\right.
\end{array}
\]

We have to compute \( \operatorname{cost}(i, j) \) for all possibles values of \( i \) and \( j(0 \leq i \leq n \) and \( 0 \leq j \leq m) \). There are \( (n+1)(m+1) \) such values. These values can be computed in the form of a table, \( M \), where each row of \( M \) corresponds to a particular value of \( i \) and each column of \( M \) corresponds to a specific value of \( j \). \( M(i, j) \) stores the value \( \operatorname{cost}(i, j) \). The zeroth row can be computed first since it corresponds to performing a series of insertions. Likewise the zeroth column can also be computed. After this, one could compute the entries of \( M \) in row-major order, starting from the first row. Rows should be processed in the order \( 1,2, \ldots, n \). Entries in any row are computed in increasing order of column number.

The entries of \( M \) can also be computed in column-major order, starting from the first column. Looking at Equation 5.13 , we see that each entry of \( M \) takes only \( O(1) \) time to compute. Therefore the whole algorithm takes \( O(m n) \) time. The value \( \cos t(n, m) \) is the final answer we are interested in. Having computed all the entries of \( M \), a minimum edit sequence can be obtained by a simple backward trace from \( \cos t(n, m) \). This backward trace is enabled by recording which of the three options for \( i > 0, j > 0 \) yielded the minimum cost for each \( i \) and \( j \).

Example 5.20 Consider the string editing problem of Example 5.19. \( X= \) \( a, a, b, a, b \) and \( Y=b, a, b, b \). Each insertion and deletion has a unit cost and a change costs 2 units. For the cases \( i=0, j > 1 \), and \( j=0, i > 1, \operatorname{cost}(i, j) \) can be computed first (Figure 5.18). Let us compute the rest of the entries in row-major order. The next entry to be computed is \( \operatorname{cost}(1,1) \).
\[
\begin{aligned}
\operatorname{cost}(1,1) & =\min \left\{\operatorname{cost}(0,1)+D\left(x_{1}\right), \operatorname{cost}(0,0)+C\left(x_{1}, y_{1}\right), \operatorname{cost}(1,0)+I\left(y_{1}\right)\right\} \\
& =\min \{2,2,2\}=2
\end{aligned}
\]

Next is computed \( \operatorname{cost}(1,2) \).
\[
\begin{aligned}
\operatorname{cost}(1,2) & =\min \left\{\operatorname{cost}(0,2)+D\left(x_{1}\right), \operatorname{cost}(0,1)+C\left(x_{1}, y_{2}\right), \operatorname{cost}(1,1)+I\left(y_{2}\right)\right\} \\
& =\min \{3,1,3\}=1
\end{aligned}
\]

The rest of the entries are computed similarly. Figure 5.18 displays the whole table. The value \( \cos t(5,4)=3 \). One possible minimum-cost edit sequence is delete \( x_{1} \), delete \( x_{2} \), and insert \( y_{4} \). Another possible minimum cost edit sequence is change \( x_{1} \) to \( y_{2} \) and delete \( x_{4} \).